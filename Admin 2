import tkinter as tk
from tkinter import ttk, messagebox, filedialog

class Ticket:
    def __init__(self, ticket_id, event_name, date, price, seat, seat_number):
        self.ticket_id = ticket_id
        self.event_name = event_name
        self.date = date
        self.price = price
        self.seat = seat
        self.seat_number = seat_number

class TicketManager:
    def __init__(self):
        self.tickets = []
        self.seat_limits = {
            'CARRIBEAN': 200,'MEDITERRANEAN A': 100, 'MEDITERRANEAN B': 100, 'ARCTIC': 100, 'SOUTHERN': 300, 'INDIAN': 100, 'ATLANTIC': 75, 'PACIFIC': 50,
        }
        self.seat_counts = {
            'CARRIBEAN': 0, 'MEDITERRANEAN A': 0, 'MEDITERRANEAN B': 0, 'ARCTIC': 0, 'SOUTHERN': 0, 'INDIAN': 0, 'ATLANTIC': 0, 'PACIFIC': 0,
        }

    def create_ticket(self, ticket):
        if self.seat_counts[ticket.seat] < self.seat_limits[ticket.seat]:
            self.tickets.append(ticket)
            self.seat_counts[ticket.seat] += 1
            return True
        else:
            return False

    def update_ticket(self, ticket_id, event_name, date, price, seat, seat_number):
        for ticket in self.tickets:
            if ticket.ticket_id == ticket_id:
                if self.seat_counts[seat] < self.seat_limits[seat] or ticket.seat == seat:
                    self.seat_counts[ticket.seat] -= 1
                    ticket.event_name = event_name
                    ticket.date = date
                    ticket.price = price
                    ticket.seat = seat
                    ticket.seat_number = seat_number
                    self.seat_counts[seat] += 1
                    return True
                else:
                    return False
        return False

    def delete_ticket(self, ticket_id):
        for ticket in self.tickets:
            if ticket.ticket_id == ticket_id:
                self.seat_counts[ticket.seat] -= 1
                self.tickets.remove(ticket)
                return True
        return False

    def sort_tickets_by_price(self):
        self.tickets.sort(key=lambda ticket: ticket.price)

    def import_from_csv(self, file_path):
        import csv
        with open(file_path, newline='', encoding='utf-8') as csvfile:
            reader = csv.DictReader(csvfile)
            for row in reader:
                ticket = Ticket(row['ID'], row['Event'], row['Tanggal'], row['Harga'], row['Seat'], row['Seat Number'])
                self.create_ticket(ticket)

class TicketManagerApp:
    def __init__(self, root):
        self.root = root
        self.root.title("JOT Ticket Management JKT48 SHANI GRADUATION CONCERT : Last Voyage")
        self.manager = TicketManager()
        self.price_to_seat = {
            'CARRIBEAN IDR 350.000': 'CARRIBEAN',
            'MEDITERRANEAN A IDR 500.000': 'MEDITERRANEAN A',
            'MEDITERRANEAN B IDR 500.000': 'MEDITERRANEAN B',
            'ARCTIC IDR 700.000': 'ARCTIC',
            'SOUTHERN IDR 1.000.000': 'SOUTHERN',
            'INDIAN IDR 1.500.000': 'INDIAN',
            'ATLANTIC IDR 2.500.000': 'ATLANTIC',
            'PACIFIC IDR 4.800.000': 'PACIFIC',
        }
        self.create_styles()
        self.create_main_widgets()

    def create_styles(self):
        style = ttk.Style()
        style.theme_use("clam")

        style.configure("TLabel", background="#E3F2FD", foreground="black", font=("Helvetica", 10, "bold"))
        style.configure("TEntry", fieldbackground="#FFFFFF", font=("Helvetica", 10))
        style.configure("TButton", background="#1E88E5", foreground="white", font=("Helvetica", 10, "bold"))
        style.map("TButton", background=[("active", "#1565C0")])

        style.configure("Treeview", background="#FFFFFF", foreground="black", rowheight=25, fieldbackground="#E3F2FD", font=("Helvetica", 10))
        style.configure("Treeview.Heading", background="#1E88E5", foreground="white", font=("Helvetica", 10, "bold"))

        style.configure("TCombobox", background="#FFFFFF", foreground="black", fieldbackground="#E3F2FD", font=("Helvetica", 10))
        style.map("TCombobox", fieldbackground=[("readonly", "#E3F2FD")])

        self.root.configure(background="#E3F2FD")

    def clear_widgets(self):
        for widget in self.root.winfo_children():
            widget.destroy()

    def create_main_widgets(self):
        self.clear_widgets()

        self.tree = ttk.Treeview(self.root, columns=('ID', 'Event', 'Tanggal', 'Harga', 'Seat', 'Seat Number'), show='headings', style="Treeview")
        self.tree.heading('ID', text='ID')
        self.tree.heading('Event', text='Event')
        self.tree.heading('Tanggal', text='Tanggal')
        self.tree.heading('Harga', text='Harga')
        self.tree.heading('Seat', text='Seat')
        self.tree.heading('Seat Number', text='Seat Number')
        self.tree.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)

        self.form_frame = ttk.Frame(self.root, padding="10 10 10 10", style="TFrame")
        self.form_frame.pack(fill=tk.X)

        ttk.Label(self.form_frame, text="ID:", style="TLabel").grid(row=0, column=0, padx=5, pady=5)
        self.id_entry = ttk.Entry(self.form_frame, style="TEntry")
        self.id_entry.grid(row=0, column=1, padx=5, pady=5)

        ttk.Label(self.form_frame, text="Event:", style="TLabel").grid(row=1, column=0, padx=5, pady=5)
        self.event_entry = ttk.Entry(self.form_frame, style="TEntry")
        self.event_entry.insert(0, "Last Voyage")
        self.event_entry.grid(row=1, column=1, padx=5, pady=5)

        ttk.Label(self.form_frame, text="Tanggal:", style="TLabel").grid(row=2, column=0, padx=5, pady=5)
        self.date_entry = ttk.Entry(self.form_frame, style="TEntry")
        self.date_entry.insert(0, "27 April 2024")
        self.date_entry.grid(row=2, column=1, padx=5, pady=5)

        ttk.Label(self.form_frame, text="Harga:", style="TLabel").grid(row=3, column=0, padx=5, pady=5)
        self.price_var = tk.StringVar()
        self.price_combobox = ttk.Combobox(self.form_frame, textvariable=self.price_var, state='readonly', style="TCombobox")
        self.price_combobox['values'] = list(self.price_to_seat.keys())
        self.price_combobox.bind('<<ComboboxSelected>>', self.update_seat_entry)
        self.price_combobox.grid(row=3, column=1, padx=5, pady=5)

        ttk.Label(self.form_frame, text="Seat Number:", style="TLabel").grid(row=5, column=0, padx=5, pady=5)
        self.seat_number_entry = ttk.Entry(self.form_frame, style="TEntry")
        self.seat_number_entry.grid(row=5, column=1, padx=5, pady=5)
        self.seat_number_entry.configure(state='readonly')

        self.button_frame = ttk.Frame(self.root, padding="10 10 10 10", style="TFrame")
        self.button_frame.pack(fill=tk.X)

        ttk.Button(self.button_frame, text="Tambah", command=self.add_ticket, style="TButton").grid(row=0, column=0, padx=5, pady=5)
        ttk.Button(self.button_frame, text="Update", command=self.update_ticket, style="TButton").grid(row=0, column=1, padx=5, pady=5)
        ttk.Button(self.button_frame, text="Hapus", command=self.delete_ticket, style="TButton").grid(row=0, column=2, padx=5, pady=5)
        ttk.Button(self.button_frame, text="Impor CSV", command=self.import_csv, style="TButton").grid(row=0, column=3, padx=5, pady=5)
        ttk.Button(self.button_frame, text="Urutkan berdasarkan Harga", command=self.sort_by_price, style="TButton").grid(row=1, column=0, columnspan=2, padx=5, pady=5)

    def update_seat_entry(self, event):
        price = self.price_var.get()
        seat = self.price_to_seat[price]
        seat_number = self.manager.seat_counts[seat] + 1
        self.seat_number_entry.configure(state='normal')
        self.seat_number_entry.delete(0, tk.END)
        self.seat_number_entry.insert(0, f"{seat_number:03}")
        self.seat_number_entry.configure(state='readonly')

    def add_ticket(self):
        ticket_id = self.id_entry.get()
        event_name = self.event_entry.get()
        date = self.date_entry.get()
        price = self.price_var.get()
        seat = self.price_to_seat[price]
        seat_number = self.seat_number_entry.get()
        new_ticket = Ticket(ticket_id, event_name, date, price, seat, seat_number)
        if self.manager.create_ticket(new_ticket):
            self.update_treeview()
        else:
            messagebox.showerror("Error", "Seat limit reached for this category")

    def update_ticket(self):
        selected_item = self.tree.selection()[0]
        ticket_id = self.tree.item(selected_item, 'values')[0]
        event_name = self.event_entry.get()
        date = self.date_entry.get()
        price = self.price_var.get()
        seat = self.price_to_seat[price]
        seat_number = self.seat_number_entry.get()
        if self.manager.update_ticket(ticket_id, event_name, date, price, seat, seat_number):
            self.update_treeview()
        else:
            messagebox.showerror("Error", "Seat limit reached for this category")

    def delete_ticket(self):
        selected_item = self.tree.selection()[0]
        ticket_id = self.tree.item(selected_item, 'values')[0]
        self.manager.delete_ticket(ticket_id)
        self.update_treeview()

    def sort_by_price(self):
        self.manager.sort_tickets_by_price()
        self.update_treeview()

    def update_treeview(self, tickets=None):
        if tickets is None:
            tickets = self.manager.tickets
        self.tree.delete(*self.tree.get_children())
        for ticket in tickets:
            self.tree.insert('', 'end', values=(ticket.ticket_id, ticket.event_name, ticket.date, ticket.price, ticket.seat, ticket.seat_number))

    def import_csv(self):
        file_path = filedialog.askopenfilename(filetypes=[("CSV Files", "*.csv")])
        if file_path:
            self.manager.import_from_csv(file_path)
            self.update_treeview()

if __name__ == "__main__":
    root = tk.Tk()
    app = TicketManagerApp(root)
    root.geometry("900x600")
    root.mainloop()
